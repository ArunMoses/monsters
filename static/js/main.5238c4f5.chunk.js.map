{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","onChangeHandler","type","onChange","App","state","searchField","fetch","users","this","json","setState","filteredMonsters","filter","toLowerCase","includes","document","title","e","a","target","value","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"+UAEaA,G,kBAAO,SAACC,GACjB,OAAO,sBAAKC,UAAU,iBAAf,UACH,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCHbC,EAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLdM,G,MAAY,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,gBACpC,OAAQ,uBACRZ,UAAY,SACZa,KAAK,SACLF,YAAeA,EACfG,SAAYF,MCoCDG,E,kDArCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IALH,E,gMAUQC,MAAM,8C,cAApBC,E,YACNC,K,SAAgCD,EAAME,O,yBAAtBb,S,WAAXc,S,qJAGG,IAAD,SAC2BF,KAAKJ,MAA/BR,EADD,EACCA,SAAUS,EADX,EACWA,YACZM,EAAmBf,EAASgB,QAAO,SAACrB,GACxC,OAAOA,EAAQE,KAAKoB,cAAcC,SAAST,EAAYQ,kBAEzD,OACGE,SAASC,MAAQ,WAEhB,sBAAK5B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,gBAAe,uCAAE,WAAOiB,GAAP,SAAAC,EAAA,sEACT,EAAKR,SAAS,CAAEL,YAAaY,EAAEE,OAAOC,QAD7B,2CAAF,wDAIjB,cAAC,EAAD,CAAUxB,SAAUe,W,GA/BZU,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlB,SAASmB,eAAe,SAM1BZ,M","file":"static/js/main.5238c4f5.chunk.js","sourcesContent":["import './card.style.css'\n\nexport const Card = (props) => {\n    return <div className='card-container'>\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n}","import \"./card-list.style.css\";\nimport { Card } from \"../card/card.component\";\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((monster) => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n};\n","import './search-box.style.css'\n\nexport const SearchBox = ({placeholder, onChangeHandler}) => {\n    return (<input\n    className = \"search\"\n    type=\"search\"\n    placeholder = {placeholder}\n    onChange = {onChangeHandler}\n  />)\n}","import \"./App.css\";\nimport { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  async componentDidMount() {\n    const users = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    this.setState({ monsters: await users.json() });\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return (\n      (document.title = \"Monsters\"),\n      (\n        <div className=\"App\">\n          <h1> Monsters Rolodex </h1>\n          <SearchBox\n            placeholder=\"search monsters\"\n            onChangeHandler={async (e) => {\n              await this.setState({ searchField: e.target.value });\n            }}\n          ></SearchBox>\n          <CardList monsters={filteredMonsters}></CardList>\n        </div>\n      )\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}